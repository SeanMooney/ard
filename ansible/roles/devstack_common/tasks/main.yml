---
# tasks file for devstack_common
- name: set nodepool facts
  set_fact:
    nodepool:
      private_ipv4: "{{ hostvars[inventory_hostname]['ansible_facts']['default_ipv4']['address'] }}"
      public_ipv4: "{{ hostvars[inventory_hostname]['ansible_facts']['default_ipv4']['address'] }}"
    zuul:
      executor:
        log_root: /tmp/zuul_logs
        work_root: /tmp/work_root

- name: clean work_root
  delegate_to: localhost
  run_once: yes
  file:
    path: '/tmp/work_root'
    state: absent

- name: create work_root
  delegate_to: localhost
  run_once: yes
  file:
    path: '/tmp/work_root'
    state: directory

- name: manage /etc/hosts and /etc/hostname
  become: yes
  tags: hostname
  block:
    - name: Ensure localhost in /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: "^127.0.0.1.*"
        line: "127.0.0.1 localhost"
        state: present

    - name: Ensure hostname does not point to 127.0.*.* in /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: "^127.0.*\\b.*\\s{{ ansible_hostname }}\\b"
        state: absent

    - name: get short hostname
      command: "hostname -s"
      register: short_hostname

    - name: update ansible_hostname fact
      set_fact:
        ansible_hostname: "{{short_hostname.stdout}}"

    - name: update /etc/hostname
      shell: "echo {{ansible_hostname}} > /etc/hostname && hostname -F /etc/hostname"

    - name: Generate /etc/hosts for all of the nodes
      blockinfile:
        dest: /etc/hosts
        marker: "# {mark} ANSIBLE GENERATED HOSTS"
        block: |
          {% for host in groups['all'] %}
          {{ hostvars[host]['ansible_facts']['default_ipv4']['address'] }} {{ hostvars[host]['ansible_hostname'] }} {{ host }} {{ hostvars[host]['ansible_fqdn'] | default(omit) }}
          {% endfor %}

    # this can sometime result in dns lookup so we do this after we have populated /etc/hosts
    # in general this should not be required as updating /etc/hostname should work.
    - name: force short_hostname
      ansible.builtin.hostname:
        name: "{{ansible_hostname}}"

- name: manage common packages debian
  become: yes
  when: ansible_facts.os_family == 'Debian'
  tags: system-packages
  block:
    - name: update apt cache
      apt:
        update_cache: yes

    - name: remove apt packages
      package:
        name: "{{ (debian_pkg_remove | join(' ')).split() }}"
        state: absent

    - name: Install apt packages
      package:
        name: "{{ (debian_pkg_install | join(' ')).split() }}"
        state: present


- name: manage common packages redhat
  become: yes
  when: ansible_facts.os_family == 'RedHat'
  tags: system-packages
  block:
    - name: enable crb repo
      when: ansible_facts['distribution'] == "CentOS"
      ini_file:
        path: /etc/yum.repos.d/centos.repo
        section: crb
        option: enabled
        value: 1
        no_extra_spaces: yes
    # this is added in our downstream image but does not work
    - name: remove centos-server repo file
      file:
        path: "/etc/yum.repos.d/centos-server.repo"
        state: absent
    # This is enabled in the current centos 9 stream vagrant
    # box image.
    - name: remove home:alvistack.repo file
      file:
        path: "/etc/yum.repos.d/home:alvistack.repo"
        state: absent
    - name: force remove custom packages
      shell: "dnf remove -y $(dnf list installed | awk '/@home_alvistack/ {print $1}')"
    - name: remove RPM packages
      package:
        name: "{{ (redhat_pkg_remove | join(' ')).split() }}"
        state: absent

    - name: Install RPM packages
      package:
        name: "{{ (redhat_pkg_install | join(' ')).split() }}"
        state: present
        update_cache: yes

- name: disable firewall
  become: yes
  when: disable_firewall | bool
  tags: firewall
  block:
    - name: Set firewall default policy
      ufw:
        state: disabled
        policy: allow
      when: ansible_facts.os_family == 'Debian'
      ignore_errors: yes

    - name: Check if firewalld is installed
      command: rpm -q firewalld
      register: firewalld_check
      changed_when: false
      failed_when: firewalld_check.rc > 1
      args:
        warn: false
      when: ansible_facts.os_family == 'RedHat'

    - name: Disable firewalld
      service:
        name: "{{ item }}"
        enabled: false
        state: stopped
      with_items:
        - firewalld
      when:
        - ansible_facts.os_family == 'RedHat'
        - firewalld_check.rc == 0

- name: create repo dir
  become: yes
  ansible.builtin.file:
    path: '{{repo_dir}}'
    state: directory
    mode: '0777'
    owner: stack
    group: stack

- name: clone repos
  become_user: stack
  become: yes
  block:
    - name: download devstack
      ansible.builtin.git:
        repo: '{{devstack_repo_url}}'
        dest: '{{repo_dir}}/devstack'
        version: '{{devstack_branch}}'
        refspec: '{{devstack_refspec | default(omit) }}'

- name: disable host key checking in sshd config
  become: yes
  tags: ssh
  block:
    - name: create ssh_config.d
      file:
        path: '/etc/ssh/ssh_config.d'
        state: directory
    - name: template sshd_config
      template:
        src: "ssh_config"
        dest: "/etc/ssh/ssh_config.d/no-ssh-host-key-checking.conf"

- name: Gather minimum local MTU
  set_fact:
    local_mtu: >
      {% set mtus = [] -%}
      {% for interface in ansible_interfaces -%}
        {% set interface_variable = 'ansible_' + interface -%}
        {% if interface_variable in hostvars[inventory_hostname] -%}
          {% set _ = mtus.append(hostvars[inventory_hostname][interface_variable]['mtu']|int) -%}
        {% endif -%}
      {% endfor -%}
      {{- mtus|min -}}

- name: Calculate external_bridge_mtu
  # 30 bytes is overhead for vxlan (which is greater than GRE
  # allowing us to use either overlay option with this MTU.
  # 40 bytes is overhead for IPv6, which will also support an IPv4 overlay.
  # TODO(andreaf) This should work, but it may have to be reconcilied with
  # the MTU setting used by the multinode setup roles in multinode pre.yaml
  set_fact:
    external_bridge_mtu: "{{ local_mtu | int - 30 - 40 }}"
